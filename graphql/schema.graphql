"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
    userBoards(user_id: ID! @where): [Board!]! @all
    board(id: ID @eq): Board @find
    me:User @auth
}

type Mutation{
    addCard(input: addCardInput! @spread): Card! @create @can(ability: "createCard" model: "App\\CardList" find: "card_list_id")
    deleteCard(id: ID!): Card @delete @can(ability: "delete", find: "id")
    updateCard(id: ID!, title: String): Card @update @can(ability: "update", find: "id")
    "Log in to a new session and get the user."
    login(email: String!, password: String!): User!
    "Log out from the current session, showing the user one last time."
    logout: User @guard
    register(
        name: String! @rules(apply: ["required", "min:2"]),
        email: String! @rules(apply:["unique:users", "email", "required"]),
        password: String! @rules(apply: ["required", "min:8"]) @hash): User @create
       @event(dispatch:  "Illuminate\\Auth\\Events\\Registered")
#    register(input: registerUser @spread): User @create
#    register(name: String!, email: String!, password: String! @hash): User @create
}

input addCardInput{
    title: String!
    order: Int!
    card_list_id: ID!
    user_id: ID!
}

#input registerUser{
#    name: String!
#    email: String! @rules(apply:["unique:users"])
##    password: String! @rules(apply:["confirmed"]) @hash
#    password: String! @hash
##    password_confirmation: String!
#}
type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    boards: [Board!]! @hasMany
    cards: [Card!]! @hasMany
}

type Board{
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    title: String!
    color: String!
    cardLists: [CardList!]! @hasMany
    owner: User! @belongsTo
}

type CardList{
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    title: String!
    cards: [Card!]! @hasMany
    board: Board! @belongsTo

}

type Card{
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    title: String!
    order: Int!
    cardList: CardList! @belongsTo
    owner: User! @belongsTo
}


